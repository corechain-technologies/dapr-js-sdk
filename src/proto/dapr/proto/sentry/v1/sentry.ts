// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v3.19.1
// source: dapr/proto/sentry/v1/sentry.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../../google/protobuf/timestamp";

export const protobufPackage = "dapr.proto.sentry.v1";

export interface SignCertificateRequest {
  id: string;
  token: string;
  trustDomain: string;
  namespace: string;
  /** A PEM-encoded x509 CSR. */
  certificateSigningRequest: Uint8Array;
  /** Name of the validator to use, if not the default for the environemtn. */
  tokenValidator: SignCertificateRequest_TokenValidator;
}

export enum SignCertificateRequest_TokenValidator {
  /** UNKNOWN - Not specified - use the default value. */
  UNKNOWN = "UNKNOWN",
  /** INSECURE - Insecure validator (default on self-hosted). */
  INSECURE = "INSECURE",
  /** KUBERNETES - Kubernetes validator (default on Kubernetes). */
  KUBERNETES = "KUBERNETES",
  /** JWKS - JWKS validator. */
  JWKS = "JWKS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function signCertificateRequest_TokenValidatorFromJSON(object: any): SignCertificateRequest_TokenValidator {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SignCertificateRequest_TokenValidator.UNKNOWN;
    case 1:
    case "INSECURE":
      return SignCertificateRequest_TokenValidator.INSECURE;
    case 2:
    case "KUBERNETES":
      return SignCertificateRequest_TokenValidator.KUBERNETES;
    case 3:
    case "JWKS":
      return SignCertificateRequest_TokenValidator.JWKS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SignCertificateRequest_TokenValidator.UNRECOGNIZED;
  }
}

export function signCertificateRequest_TokenValidatorToJSON(object: SignCertificateRequest_TokenValidator): string {
  switch (object) {
    case SignCertificateRequest_TokenValidator.UNKNOWN:
      return "UNKNOWN";
    case SignCertificateRequest_TokenValidator.INSECURE:
      return "INSECURE";
    case SignCertificateRequest_TokenValidator.KUBERNETES:
      return "KUBERNETES";
    case SignCertificateRequest_TokenValidator.JWKS:
      return "JWKS";
    case SignCertificateRequest_TokenValidator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function signCertificateRequest_TokenValidatorToNumber(object: SignCertificateRequest_TokenValidator): number {
  switch (object) {
    case SignCertificateRequest_TokenValidator.UNKNOWN:
      return 0;
    case SignCertificateRequest_TokenValidator.INSECURE:
      return 1;
    case SignCertificateRequest_TokenValidator.KUBERNETES:
      return 2;
    case SignCertificateRequest_TokenValidator.JWKS:
      return 3;
    case SignCertificateRequest_TokenValidator.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface SignCertificateResponse {
  /** A PEM-encoded x509 Certificate. */
  workloadCertificate: Uint8Array;
  /**
   * A list of PEM-encoded x509 Certificates that establish the trust chain
   * between the workload certificate and the well-known trust root cert.
   */
  trustChainCertificates: Uint8Array[];
  validUntil: Date | undefined;
}

function createBaseSignCertificateRequest(): SignCertificateRequest {
  return {
    id: "",
    token: "",
    trustDomain: "",
    namespace: "",
    certificateSigningRequest: new Uint8Array(0),
    tokenValidator: SignCertificateRequest_TokenValidator.UNKNOWN,
  };
}

export const SignCertificateRequest = {
  encode(message: SignCertificateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.trustDomain !== "") {
      writer.uint32(26).string(message.trustDomain);
    }
    if (message.namespace !== "") {
      writer.uint32(34).string(message.namespace);
    }
    if (message.certificateSigningRequest.length !== 0) {
      writer.uint32(42).bytes(message.certificateSigningRequest);
    }
    if (message.tokenValidator !== SignCertificateRequest_TokenValidator.UNKNOWN) {
      writer.uint32(48).int32(signCertificateRequest_TokenValidatorToNumber(message.tokenValidator));
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignCertificateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trustDomain = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.namespace = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.certificateSigningRequest = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.tokenValidator = signCertificateRequest_TokenValidatorFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<SignCertificateRequest, Uint8Array>
  async *encodeTransform(
    source:
      | AsyncIterable<SignCertificateRequest | SignCertificateRequest[]>
      | Iterable<SignCertificateRequest | SignCertificateRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SignCertificateRequest.encode(p).finish()];
        }
      } else {
        yield* [SignCertificateRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, SignCertificateRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<SignCertificateRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SignCertificateRequest.decode(p)];
        }
      } else {
        yield* [SignCertificateRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): SignCertificateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      trustDomain: isSet(object.trustDomain) ? globalThis.String(object.trustDomain) : "",
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      certificateSigningRequest: isSet(object.certificateSigningRequest)
        ? bytesFromBase64(object.certificateSigningRequest)
        : new Uint8Array(0),
      tokenValidator: isSet(object.tokenValidator)
        ? signCertificateRequest_TokenValidatorFromJSON(object.tokenValidator)
        : SignCertificateRequest_TokenValidator.UNKNOWN,
    };
  },

  toJSON(message: SignCertificateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.trustDomain !== "") {
      obj.trustDomain = message.trustDomain;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.certificateSigningRequest.length !== 0) {
      obj.certificateSigningRequest = base64FromBytes(message.certificateSigningRequest);
    }
    if (message.tokenValidator !== SignCertificateRequest_TokenValidator.UNKNOWN) {
      obj.tokenValidator = signCertificateRequest_TokenValidatorToJSON(message.tokenValidator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignCertificateRequest>, I>>(base?: I): SignCertificateRequest {
    return SignCertificateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignCertificateRequest>, I>>(object: I): SignCertificateRequest {
    const message = createBaseSignCertificateRequest();
    message.id = object.id ?? "";
    message.token = object.token ?? "";
    message.trustDomain = object.trustDomain ?? "";
    message.namespace = object.namespace ?? "";
    message.certificateSigningRequest = object.certificateSigningRequest ?? new Uint8Array(0);
    message.tokenValidator = object.tokenValidator ?? SignCertificateRequest_TokenValidator.UNKNOWN;
    return message;
  },
};

function createBaseSignCertificateResponse(): SignCertificateResponse {
  return { workloadCertificate: new Uint8Array(0), trustChainCertificates: [], validUntil: undefined };
}

export const SignCertificateResponse = {
  encode(message: SignCertificateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.workloadCertificate.length !== 0) {
      writer.uint32(10).bytes(message.workloadCertificate);
    }
    for (const v of message.trustChainCertificates) {
      writer.uint32(18).bytes(v!);
    }
    if (message.validUntil !== undefined) {
      Timestamp.encode(toTimestamp(message.validUntil), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignCertificateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignCertificateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workloadCertificate = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trustChainCertificates.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validUntil = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<SignCertificateResponse, Uint8Array>
  async *encodeTransform(
    source:
      | AsyncIterable<SignCertificateResponse | SignCertificateResponse[]>
      | Iterable<SignCertificateResponse | SignCertificateResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SignCertificateResponse.encode(p).finish()];
        }
      } else {
        yield* [SignCertificateResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, SignCertificateResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<SignCertificateResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SignCertificateResponse.decode(p)];
        }
      } else {
        yield* [SignCertificateResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): SignCertificateResponse {
    return {
      workloadCertificate: isSet(object.workloadCertificate)
        ? bytesFromBase64(object.workloadCertificate)
        : new Uint8Array(0),
      trustChainCertificates: globalThis.Array.isArray(object?.trustChainCertificates)
        ? object.trustChainCertificates.map((e: any) => bytesFromBase64(e))
        : [],
      validUntil: isSet(object.validUntil) ? fromJsonTimestamp(object.validUntil) : undefined,
    };
  },

  toJSON(message: SignCertificateResponse): unknown {
    const obj: any = {};
    if (message.workloadCertificate.length !== 0) {
      obj.workloadCertificate = base64FromBytes(message.workloadCertificate);
    }
    if (message.trustChainCertificates?.length) {
      obj.trustChainCertificates = message.trustChainCertificates.map((e) => base64FromBytes(e));
    }
    if (message.validUntil !== undefined) {
      obj.validUntil = message.validUntil.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignCertificateResponse>, I>>(base?: I): SignCertificateResponse {
    return SignCertificateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignCertificateResponse>, I>>(object: I): SignCertificateResponse {
    const message = createBaseSignCertificateResponse();
    message.workloadCertificate = object.workloadCertificate ?? new Uint8Array(0);
    message.trustChainCertificates = object.trustChainCertificates?.map((e) => e) || [];
    message.validUntil = object.validUntil ?? undefined;
    return message;
  },
};

export type CAService = typeof CAService;
export const CAService = {
  /**
   * A request for a time-bound certificate to be signed.
   *
   * The requesting side must provide an id for both loosely based
   * And strong based identities.
   */
  signCertificate: {
    path: "/dapr.proto.sentry.v1.CA/SignCertificate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignCertificateRequest) => Buffer.from(SignCertificateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignCertificateRequest.decode(value),
    responseSerialize: (value: SignCertificateResponse) => Buffer.from(SignCertificateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignCertificateResponse.decode(value),
  },
} as const;

export interface CAServer extends UntypedServiceImplementation {
  /**
   * A request for a time-bound certificate to be signed.
   *
   * The requesting side must provide an id for both loosely based
   * And strong based identities.
   */
  signCertificate: handleUnaryCall<SignCertificateRequest, SignCertificateResponse>;
}

export interface CAClient extends Client {
  /**
   * A request for a time-bound certificate to be signed.
   *
   * The requesting side must provide an id for both loosely based
   * And strong based identities.
   */
  signCertificate(
    request: SignCertificateRequest,
    callback: (error: ServiceError | null, response: SignCertificateResponse) => void,
  ): ClientUnaryCall;
  signCertificate(
    request: SignCertificateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignCertificateResponse) => void,
  ): ClientUnaryCall;
  signCertificate(
    request: SignCertificateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignCertificateResponse) => void,
  ): ClientUnaryCall;
}

export const CAClient = makeGenericClientConstructor(CAService, "dapr.proto.sentry.v1.CA") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CAClient;
  service: typeof CAService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
